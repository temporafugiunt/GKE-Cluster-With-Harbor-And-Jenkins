#!/bin/bash

# 
#   Initializes a test ConferenceDb database in a default freebyTech MS SQL Docker image.
#
#   Authors: James Eby
#

# Proper secret files need to exist to populate all other secrets that are true secrets, the below SQL server settings are throw away.
. ../cloud-ops/kubernetes/devops-sandbox-cluster/.secrets/set-external-resources-environment-variables.sh

# use these instead of autogenerated Azure settings for local docker dev. This will also populate it
# in your environment variables so that the application will see it as well.
export DB__SERVERNAME=localhost
export DB__USERNAME='sa'
export DB__USERPASSWORD='Xatr7xEvwtUP'
db=ConferenceDb

# Only do this when you need to start over, and don't care if you are destroying the data of other applications that can be using the same localhost
# SQL Server instance (with the same sa password of course)
# docker rm tiv-sql-localtest -f

docker run -e 'ACCEPT_EULA=Y' -e "SA_PASSWORD=$DB__USERPASSWORD" \
   -p 1433:1433 --name tiv-sql-localtest \
   -d registry.freebytech.com/freebytech-pub/msssql:latest

echo 'Sleeping for 20 seconds to wait for SQL Server to be available'
sleep 20s

docker exec tiv-sql-localtest bash -c "/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P '$DB__USERPASSWORD' -Q 'CREATE DATABASE $db'"